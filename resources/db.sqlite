PRAGMA foreign_keys = OFF;

CREATE TABLE IF NOT EXISTS sequence (
  seguid VARCHAR(40) NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS genome (
  accession VARCHAR(150) NOT NULL PRIMARY KEY,
  description TEXT,
  seguid VARCHAR(40) NOT NULL,
  FOREIGN KEY(seguid) REFERENCES sequence(seguid)
);

CREATE TABLE IF NOT EXISTS dna (
  varid INTEGER PRIMARY KEY,
  seguid VARCHAR(40) NOT NULL,
  pos INTEGER NOT NULL,
  ref VARCHAR(1000) NOT NULL,
  alt VARCHAR(1000) NOT NULL,
  FOREIGN KEY(seguid) REFERENCES sequence(seguid)
);

CREATE TABLE IF NOT EXISTS prot (
  varid INTEGER PRIMARY KEY,
  seguid VARCHAR(40) NOT NULL,
  protein VARCHAR(45) NOT NULL,
  pos INTEGER NOT NULL,
  ref VARCHAR(1000) NOT NULL,
  alt VARCHAR(1000) NOT NULL,
  FOREIGN KEY(seguid) REFERENCES sequence(seguid)
);

CREATE TABLE IF NOT EXISTS lineage (
  seguid VARCHAR(40) NOT NULL,
  lineage VARCHAR(45) NOT NULL,
  pangolin_version VARCHAR(45) NOT NULL,
  pangolearn_version VARCHAR(45) NOT NULL,
  FOREIGN KEY(seguid) REFERENCES sequence(seguid)
);

CREATE INDEX IF NOT EXISTS idx_dna ON dna (pos, ref, alt);
CREATE INDEX IF NOT EXISTS idx_prot ON prot(pos, ref, alt);

CREATE VIEW IF NOT EXISTS dna_view
AS
SELECT
	accession,
	description,
  genome.seguid,
  pos,
  ref,
  alt,
  lineage,
  pangolin_version,
  pangolearn_version
FROM
	genome
LEFT JOIN sequence USING (seguid)
LEFT JOIN dna USING (seguid)
LEFT JOIN lineage USING (seguid);

CREATE VIEW IF NOT EXISTS prot_view
AS
SELECT
	accession,
	description,
  genome.seguid,
  protein,
  pos,
  ref,
  alt,
  lineage,
  pangolin_version,
  pangolearn_version
FROM
	genome
LEFT JOIN sequence USING (seguid)
LEFT JOIN prot USING (seguid)
LEFT JOIN lineage USING (seguid);

PRAGMA foreign_keys = ON;
