PRAGMA user_version = 3;
PRAGMA foreign_keys = OFF;
PRAGMA analysis_limit=400;
PRAGMA optimize;

CREATE TABLE IF NOT EXISTS sequence (
	seqhash VARCHAR(40) NOT NULL PRIMARY KEY
) WITHOUT ROWID;

CREATE TABLE IF NOT EXISTS genome (
	accession VARCHAR(150) NOT NULL PRIMARY KEY,
	description TEXT,
	seqhash VARCHAR(40) NOT NULL,
	lineage VARCHAR(40),
	zip TEXT,
	date TEXT,
	gisaid VARCHAR(100),
	ena VARCHAR(100),
	source VARCHAR(100) DEFAULT '',
	collection VARCHAR(100) DEFAULT '',
	lab VARCHAR(100) DEFAULT '',
	technology VARCHAR(100) DEFAULT '',
	platform VARCHAR(100) DEFAULT '',
	chemistry VARCHAR(100) DEFAULT '',
	software VARCHAR(45) DEFAULT '',
	software_version VARCHAR(45) DEFAULT '',
	material VARCHAR(100) DEFAULT '',
	ct REAL DEFAULT NULL,
	imported TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY(seqhash) REFERENCES sequence(seqhash)
) WITHOUT ROWID;

CREATE INDEX idx_meta_lineage ON genome(lineage);
CREATE INDEX idx_meta_zip ON genome(zip);
CREATE INDEX idx_meta_date ON genome(date);
CREATE INDEX idx_meta_gisaid ON genome(gisaid);
CREATE INDEX idx_meta_ena ON genome(ena);
CREATE INDEX idx_meta_source ON genome(source);
CREATE INDEX idx_meta_collection ON genome(collection);
CREATE INDEX idx_meta_lab ON genome(lab);
CREATE INDEX idx_meta_technology ON genome(technology);
CREATE INDEX idx_meta_platform ON genome(platform);
CREATE INDEX idx_meta_chemistry ON genome(chemistry);
CREATE INDEX idx_meta_software ON genome(software);
CREATE INDEX idx_meta_version ON genome(software_version);
CREATE INDEX idx_meta_material ON genome(material);
CREATE INDEX idx_meta_ct ON genome(ct);
CREATE INDEX idx_meta_imported ON genome(imported);

CREATE TABLE IF NOT EXISTS sequence2dna (
	seqhash VARCHAR(40) NOT NULL,
	varid INTEGER NOT NULL,
	PRIMARY KEY(seqhash, varid),
	FOREIGN KEY(seqhash) REFERENCES sequence(seqhash),
	FOREIGN KEY(varid) REFERENCES dna(varid)
) WITHOUT ROWID;

CREATE TABLE IF NOT EXISTS sequence2prot (
	seqhash VARCHAR(40) NOT NULL,
	varid INTEGER NOT NULL,
	PRIMARY KEY(seqhash, varid),
	FOREIGN KEY(seqhash) REFERENCES sequence(seqhash),
	FOREIGN KEY(varid) REFERENCES prot(varid)
) WITHOUT ROWID;

CREATE TABLE IF NOT EXISTS dna (
	varid INTEGER PRIMARY KEY,
	start INTEGER NOT NULL,
	end INTEGER,
	ref VARCHAR(1000) NOT NULL,
	alt VARCHAR(1000) NOT NULL,
	UNIQUE(start, end, alt, ref)
);

CREATE TABLE IF NOT EXISTS prot (
	varid INTEGER PRIMARY KEY,
	protein VARCHAR(45) NOT NULL,
	locus VARCHAR(45) NOT NULL,
	start INTEGER NOT NULL,
	end INTEGER,
	ref VARCHAR(1000) NOT NULL,
	alt VARCHAR(1000) NOT NULL,
	UNIQUE(protein, locus, start, end, alt, ref)
);

CREATE TABLE IF NOT EXISTS profile (
	seqhash VARCHAR(40) NOT NULL PRIMARY KEY,
	dna_profile TEXT NOT NULL,
	aa_profile TEXT NOT NULL,
	fs_profile TEXT NOT NULL
) WITHOUT ROWID;

CREATE VIEW IF NOT EXISTS essence
AS
SELECT
	accession,
	description,
	lab,
	source,
	collection,
	technology,
	platform,
	chemistry,
	material,
	ct,
	software,
	software_version,
	gisaid,
	ena,
	zip,
	date,
	lineage,
	genome.seqhash,
	dna_profile,
	aa_profile,
	fs_profile
FROM
	genome
LEFT JOIN sequence USING (seqhash)
LEFT JOIN profile USING (seqhash);

CREATE VIEW IF NOT EXISTS dna_view
AS
SELECT
	accession,
	description,
	lab,
	source,
	collection,
	technology,
	platform,
	chemistry,
	material,
	ct,
	software,
	software_version,
	gisaid,
	ena,
	zip,
	date,
	lineage,
	genome.seqhash,
	start,
	end,
	ref,
	alt
FROM
	genome
LEFT JOIN sequence USING (seqhash)
LEFT JOIN sequence2dna USING (seqhash)
LEFT JOIN dna USING (varid);

CREATE VIEW IF NOT EXISTS prot_view
AS
SELECT
	accession,
	description,
	lab,
	source,
	collection,
	technology,
	platform,
	chemistry,
	material,
	ct,
	software,
	software_version,
	gisaid,
	ena,
	zip,
	date,
	lineage,
	genome.seqhash,
	protein,
	locus,
	start,
	end,
	ref,
	alt
FROM
	genome
LEFT JOIN sequence USING (seqhash)
LEFT JOIN sequence2prot USING (seqhash)
LEFT JOIN prot USING (varid);

PRAGMA foreign_keys = ON;
